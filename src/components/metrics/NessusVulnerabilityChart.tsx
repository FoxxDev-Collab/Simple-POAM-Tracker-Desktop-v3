import React, { useEffect, useState } from 'react';
import { Bar } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ChartData,
  ChartOptions
} from 'chart.js';
import { getThemeColors } from './themeUtils';

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
);

interface NessusScan {
  id: string;
  name: string;
  imported_date: string;
  version: number;
  system_id: string;
}

interface NessusFinding {
  id: string;
  scan_id: string;
  severity?: string;
  risk_factor?: string;
  host?: string;
}

interface NessusVulnerabilityChartProps {
  scans: NessusScan[];
  findings: NessusFinding[];
}

const NessusVulnerabilityChart: React.FC<NessusVulnerabilityChartProps> = ({ scans, findings }) => {
  const [chartData, setChartData] = useState<ChartData<'bar'> | null>(null);
  const [chartOptions, setChartOptions] = useState<ChartOptions<'bar'> | null>(null);

  useEffect(() => {
    // Process data to create chart data with scan timeline
    const processedScans = scans
      .sort((a, b) => new Date(a.imported_date).getTime() - new Date(b.imported_date).getTime())
      .slice(-6); // Show last 6 scans
    
    if (processedScans.length === 0) {
      setChartData(null);
      return;
    }

    const scanStats = processedScans.map(scan => {
      const scanFindings = findings.filter(f => f.scan_id === scan.id);
      
      const critical = scanFindings.filter(f => 
        f.risk_factor?.toLowerCase() === 'critical' || f.severity === '4'
      ).length;
      
      const high = scanFindings.filter(f => 
        f.risk_factor?.toLowerCase() === 'high' || f.severity === '3'
      ).length;
      
      const medium = scanFindings.filter(f => 
        f.risk_factor?.toLowerCase() === 'medium' || f.severity === '2'
      ).length;
      
      const low = scanFindings.filter(f => 
        f.risk_factor?.toLowerCase() === 'low' || f.severity === '1'
      ).length;
      
      return {
        name: scan.name.length > 15 ? scan.name.substring(0, 15) + '...' : scan.name,
        date: new Date(scan.imported_date).toLocaleDateString(),
        critical,
        high,
        medium,
        low,
        total: scanFindings.length
      };
    });

    const themeColors = getThemeColors();

    const data: ChartData<'bar'> = {
      labels: scanStats.map(stat => stat.name),
      datasets: [
        {
          label: 'Critical',
          data: scanStats.map(stat => stat.critical),
          backgroundColor: '#dc2626',
          borderColor: '#dc2626',
          borderWidth: 1,
        },
        {
          label: 'High',
          data: scanStats.map(stat => stat.high),
          backgroundColor: '#ea580c',
          borderColor: '#ea580c',
          borderWidth: 1,
        },
        {
          label: 'Medium',
          data: scanStats.map(stat => stat.medium),
          backgroundColor: '#d97706',
          borderColor: '#d97706',
          borderWidth: 1,
        },
        {
          label: 'Low',
          data: scanStats.map(stat => stat.low),
          backgroundColor: '#2563eb',
          borderColor: '#2563eb',
          borderWidth: 1,
        },
      ],
    };

    const options: ChartOptions<'bar'> = {
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        x: {
          stacked: true,
          grid: {
            color: themeColors.border,
          },
          ticks: {
            color: themeColors.foreground,
            maxRotation: 45,
            font: {
              size: 11,
            },
          },
        },
        y: {
          stacked: true,
          grid: {
            color: themeColors.border,
          },
          ticks: {
            color: themeColors.foreground,
          },
        },
      },
      plugins: {
        legend: {
          position: 'top' as const,
          labels: {
            color: themeColors.foreground,
            usePointStyle: true,
            padding: 15,
            font: {
              size: 12,
            },
          },
        },
        tooltip: {
          backgroundColor: themeColors.card,
          titleColor: themeColors.foreground,
          bodyColor: themeColors.foreground,
          borderColor: themeColors.border,
          borderWidth: 1,
          padding: 10,
          cornerRadius: 4,
          callbacks: {
            afterLabel: (context) => {
              const scanIndex = context.dataIndex;
              const scan = scanStats[scanIndex];
              return [`Date: ${scan.date}`, `Total: ${scan.total} findings`];
            },
          },
        },
      },
    };

    setChartData(data);
    setChartOptions(options);
  }, [scans, findings]);

  if (!chartData) {
    return (
      <div className="chart-container">
        <h4 className="chart-title">Nessus Vulnerability Trends</h4>
        <div className="chart-content">
          <div className="no-data">No Nessus scan data available</div>
        </div>
      </div>
    );
  }

  return (
    <div className="chart-container">
      <h4 className="chart-title">Nessus Vulnerability Trends</h4>
      <div className="chart-content">
        <div style={{ position: 'relative', height: '300px', width: '100%' }}>
          <Bar data={chartData} options={chartOptions || undefined} />
        </div>
      </div>
      <div className="chart-summary">
        <p className="summary-text">
          Showing vulnerability trends across the last {scans.slice(-6).length} scans. 
          Track progress in reducing critical and high-severity findings over time.
        </p>
      </div>
    </div>
  );
};

export default NessusVulnerabilityChart;
