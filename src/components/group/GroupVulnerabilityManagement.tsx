import { useState, useEffect } from 'react';
import { invoke } from '@tauri-apps/api/core';
import { 
  Shield, 
  AlertTriangle, 
  Target, 
  Eye,
  Users,
  FileText,
  Search,
  ArrowUpDown,
  Link,
  CheckCircle,
  XCircle,
  Clock,
  Settings
} from 'lucide-react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';
import { Button } from '../ui/button';
import { Badge } from '../ui/badge';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../ui/table';
import { Input } from '../ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';
import { useToast } from '../../context/ToastContext';

interface GroupVulnerabilityManagementProps {
  groupId: string;
  systems: any[];
  onCreateControlBasedPOAM?: (controlGaps: ControlGap[]) => void;
}

interface CrossSystemVulnerability {
  vulnerability_id: string;
  severity: string;
  title: string;
  description: string;
  affected_systems: string[];
  cve_ids: string[];
  suggested_poam_title: string;
  risk_score: number;
  mapped_controls?: string[];
}

interface ControlGap {
  control_id: string;
  control_title: string;
  implementation_status: string;
  affected_vulnerabilities: CrossSystemVulnerability[];
  gap_severity: 'Critical' | 'High' | 'Medium' | 'Low';
  remediation_priority: number;
  affected_systems: string[];
}

interface VulnerabilityControlMapping {
  vulnerability_id: string;
  control_id: string;
  mapping_confidence: number;
  mapping_rationale: string;
}

interface GroupVulnerabilityAnalysis {
  group_id: string;
  total_systems: number;
  total_vulnerabilities: number;
  critical_vulnerabilities: number;
  high_vulnerabilities: number;
  medium_vulnerabilities: number;
  low_vulnerabilities: number;
  cross_system_vulnerabilities: CrossSystemVulnerability[];
  control_gaps: ControlGap[];
  vulnerability_control_mappings: VulnerabilityControlMapping[];
}

export default function GroupVulnerabilityManagement({ 
  groupId, 
  systems, 
  onCreateControlBasedPOAM 
}: GroupVulnerabilityManagementProps) {
  const [analysis, setAnalysis] = useState<GroupVulnerabilityAnalysis | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [selectedControlGaps, setSelectedControlGaps] = useState<Set<string>>(new Set());
  const [searchFilter, setSearchFilter] = useState('');
  const [severityFilter, setSeverityFilter] = useState<string>('all');
  const [activeTab, setActiveTab] = useState('vulnerabilities');
  const [sortBy, setSortBy] = useState<'severity' | 'systems' | 'controls' | 'priority'>('severity');
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');
  
  const { showToast } = useToast();

  useEffect(() => {
    if (groupId) {
      analyzeVulnerabilitiesWithControls();
    }
  }, [groupId]);

  const analyzeVulnerabilitiesWithControls = async () => {
    setIsLoading(true);
    try {
      console.log('Analyzing vulnerabilities with NIST control mapping for group:', groupId);
      
      // Enhanced vulnerability analysis with control mapping
      const result = await invoke<GroupVulnerabilityAnalysis>('analyze_group_vulnerabilities_with_controls', { 
        groupId 
      });
      
      setAnalysis(result);
      console.log('Enhanced vulnerability analysis completed:', result);
    } catch (error) {
      console.error('Failed to analyze vulnerabilities with controls:', error);
      
      // Fallback to existing analysis if enhanced version not available
      try {
        const basicResult = await invoke<any>('analyze_group_vulnerabilities', { groupId });
        
        // Transform basic result to enhanced format
        const enhancedResult: GroupVulnerabilityAnalysis = {
          ...basicResult,
          control_gaps: [],
          vulnerability_control_mappings: []
        };
        
        setAnalysis(enhancedResult);
        showToast('warning', 'Using basic vulnerability analysis. Enhanced control mapping not available.');
      } catch (fallbackError) {
        console.error('Fallback analysis also failed:', fallbackError);
        showToast('error', 'Failed to analyze group vulnerabilities');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const getSeverityBadgeVariant = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical':
        return 'destructive';
      case 'high':
        return 'destructive';
      case 'medium':
        return 'default';
      case 'low':
        return 'secondary';
      default:
        return 'outline';
    }
  };

  const getImplementationStatusIcon = (status: string) => {
    switch (status.toLowerCase()) {
      case 'implemented':
        return <CheckCircle className="w-4 h-4 text-green-600" />;
      case 'partially implemented':
        return <Clock className="w-4 h-4 text-yellow-600" />;
      case 'not implemented':
        return <XCircle className="w-4 h-4 text-red-600" />;
      default:
        return <Settings className="w-4 h-4 text-gray-600" />;
    }
  };

  const filteredControlGaps = analysis?.control_gaps.filter(gap => {
    if (!searchFilter && severityFilter === 'all') return true;
    
    const query = searchFilter.toLowerCase();
    const matchesSearch = gap.control_id.toLowerCase().includes(query) ||
                         gap.control_title.toLowerCase().includes(query);
    
    const matchesSeverity = severityFilter === 'all' || 
                           gap.gap_severity.toLowerCase() === severityFilter.toLowerCase();
    
    return matchesSearch && matchesSeverity;
  }).sort((a, b) => {
    let comparison = 0;
    
    switch (sortBy) {
      case 'severity':
        const severityOrder = { 'Critical': 4, 'High': 3, 'Medium': 2, 'Low': 1 };
        comparison = (severityOrder[b.gap_severity] || 0) - (severityOrder[a.gap_severity] || 0);
        break;
      case 'systems':
        comparison = b.affected_systems.length - a.affected_systems.length;
        break;
      case 'controls':
        comparison = a.control_id.localeCompare(b.control_id);
        break;
      case 'priority':
        comparison = b.remediation_priority - a.remediation_priority;
        break;
    }
    
    return sortDirection === 'desc' ? comparison : -comparison;
  }) || [];

  const handleSelectControlGap = (controlId: string) => {
    const newSelected = new Set(selectedControlGaps);
    if (newSelected.has(controlId)) {
      newSelected.delete(controlId);
    } else {
      newSelected.add(controlId);
    }
    setSelectedControlGaps(newSelected);
  };

  const handleSelectAllControlGaps = () => {
    if (selectedControlGaps.size === filteredControlGaps.length) {
      setSelectedControlGaps(new Set());
    } else {
      setSelectedControlGaps(new Set(filteredControlGaps.map(gap => gap.control_id)));
    }
  };

  const handleCreateControlBasedPOAMs = () => {
    if (selectedControlGaps.size === 0) {
      showToast('warning', 'Please select control gaps to create POAMs');
      return;
    }
    
    const selectedGaps = filteredControlGaps.filter(gap => 
      selectedControlGaps.has(gap.control_id)
    );
    
    if (onCreateControlBasedPOAM) {
      onCreateControlBasedPOAM(selectedGaps);
    } else {
      console.log('Creating Control-based POAMs for gaps:', selectedGaps);
      showToast('info', `Creating Control-based POAMs for ${selectedGaps.length} control gaps`);
    }
  };

  const getSystemName = (systemId: string) => {
    const system = systems.find(s => s.id === systemId);
    return system?.name || systemId;
  };

  if (isLoading) {
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-bold">Group Vulnerability Management</h2>
            <p className="text-muted-foreground">Analyzing vulnerabilities and control gaps across all systems...</p>
          </div>
        </div>
        <div className="flex items-center justify-center p-12">
          <div className="text-muted-foreground">Loading vulnerability and control analysis...</div>
        </div>
      </div>
    );
  }

  if (!analysis) {
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-bold">Group Vulnerability Management</h2>
            <p className="text-muted-foreground">Control-driven vulnerability assessment and remediation planning</p>
          </div>
          <Button onClick={analyzeVulnerabilitiesWithControls}>
            <Search className="w-4 h-4 mr-2" />
            Analyze Vulnerabilities & Controls
          </Button>
        </div>
        
        <Card>
          <CardContent className="flex items-center justify-center p-12">
            <div className="text-center">
              <Shield className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
              <h3 className="text-lg font-semibold mb-2">No Analysis Available</h3>
              <p className="text-muted-foreground mb-4">
                Click "Analyze Vulnerabilities & Controls" to perform control-driven vulnerability assessment
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">Group Vulnerability Management</h2>
          <p className="text-muted-foreground">
            Control-driven security assessment across {analysis.total_systems} systems
          </p>
        </div>
        <div className="flex gap-2">
          <Button variant="outline" onClick={analyzeVulnerabilitiesWithControls}>
            <Search className="w-4 h-4 mr-2" />
            Refresh Analysis
          </Button>
          <Button 
            onClick={handleCreateControlBasedPOAMs}
            disabled={selectedControlGaps.size === 0}
          >
            <Target className="w-4 h-4 mr-2" />
            Create Control POAMs ({selectedControlGaps.size})
          </Button>
        </div>
      </div>

      {/* Summary Stats */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Control Gaps</CardTitle>
            <Shield className="h-4 w-4 text-destructive" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-destructive">
              {analysis.control_gaps?.length || 0}
            </div>
            <p className="text-xs text-muted-foreground">NIST controls with gaps</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Cross-System Issues</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{analysis.cross_system_vulnerabilities.length}</div>
            <p className="text-xs text-muted-foreground">Affecting multiple systems</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Critical & High</CardTitle>
            <AlertTriangle className="h-4 w-4 text-destructive" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-destructive">
              {analysis.critical_vulnerabilities + analysis.high_vulnerabilities}
            </div>
            <p className="text-xs text-muted-foreground">
              {analysis.critical_vulnerabilities} critical, {analysis.high_vulnerabilities} high
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Control Mappings</CardTitle>
            <Link className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{analysis.vulnerability_control_mappings?.length || 0}</div>
            <p className="text-xs text-muted-foreground">Vulnerability-control links</p>
          </CardContent>
        </Card>
      </div>

      {/* Main Content Tabs */}
      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="vulnerabilities">
            <AlertTriangle className="w-4 h-4 mr-2" />
            Vulnerabilities
          </TabsTrigger>
          <TabsTrigger value="control-gaps">
            <Shield className="w-4 h-4 mr-2" />
            Control Gaps ({analysis.control_gaps?.length || 0})
          </TabsTrigger>
          <TabsTrigger value="mappings">
            <Link className="w-4 h-4 mr-2" />
            Control Mappings
          </TabsTrigger>
        </TabsList>

        <TabsContent value="vulnerabilities">
          <Card>
            <CardHeader>
              <CardTitle>Cross-System Vulnerabilities</CardTitle>
              <CardDescription>
                Vulnerabilities affecting multiple systems with NIST control mappings
              </CardDescription>
            </CardHeader>
            <CardContent>
              {analysis.cross_system_vulnerabilities.length === 0 ? (
                <div className="text-center py-8">
                  <FileText className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
                  <h3 className="text-lg font-semibold mb-2">No Cross-System Vulnerabilities</h3>
                  <p className="text-muted-foreground">No vulnerabilities affect multiple systems</p>
                </div>
              ) : (
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Vulnerability</TableHead>
                      <TableHead>Severity</TableHead>
                      <TableHead>Affected Systems</TableHead>
                      <TableHead>Mapped Controls</TableHead>
                      <TableHead>Risk Score</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {analysis.cross_system_vulnerabilities.map((vuln) => (
                      <TableRow key={vuln.vulnerability_id}>
                        <TableCell>
                          <div className="space-y-1">
                            <div className="font-medium">{vuln.vulnerability_id}</div>
                            <div className="text-sm text-muted-foreground">{vuln.title}</div>
                          </div>
                        </TableCell>
                        <TableCell>
                          <Badge variant={getSeverityBadgeVariant(vuln.severity)}>
                            {vuln.severity.toUpperCase()}
                          </Badge>
                        </TableCell>
                        <TableCell>
                          <div className="space-y-1">
                            <div className="font-medium">{vuln.affected_systems.length} systems</div>
                            <div className="text-sm text-muted-foreground">
                              {vuln.affected_systems.slice(0, 2).map(systemId => getSystemName(systemId)).join(', ')}
                              {vuln.affected_systems.length > 2 && ` +${vuln.affected_systems.length - 2} more`}
                            </div>
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="flex flex-wrap gap-1">
                            {vuln.mapped_controls?.slice(0, 3).map(controlId => (
                              <Badge key={controlId} variant="outline" className="text-xs">
                                {controlId}
                              </Badge>
                            )) || <span className="text-muted-foreground text-sm">No mappings</span>}
                            {(vuln.mapped_controls?.length || 0) > 3 && (
                              <Badge variant="outline" className="text-xs">
                                +{(vuln.mapped_controls?.length || 0) - 3} more
                              </Badge>
                            )}
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="font-medium">
                            {vuln.risk_score.toFixed(1)}
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="control-gaps">
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle>NIST Control Implementation Gaps</CardTitle>
                  <CardDescription>
                    Controls with implementation gaps that require remediation
                  </CardDescription>
                </div>
                <div className="flex items-center gap-2">
                  <Button 
                    variant="outline" 
                    size="sm" 
                    onClick={handleSelectAllControlGaps}
                  >
                    {selectedControlGaps.size === filteredControlGaps.length ? 'Deselect All' : 'Select All'}
                  </Button>
                </div>
              </div>
              
              {/* Filters */}
              <div className="flex gap-4 items-center">
                <div className="flex-1">
                  <Input
                    placeholder="Search controls..."
                    value={searchFilter}
                    onChange={(e) => setSearchFilter(e.target.value)}
                    className="max-w-sm"
                  />
                </div>
                
                <select
                  value={severityFilter}
                  onChange={(e) => setSeverityFilter(e.target.value)}
                  className="px-3 py-2 border rounded-md bg-background"
                >
                  <option value="all">All Severities</option>
                  <option value="critical">Critical</option>
                  <option value="high">High</option>
                  <option value="medium">Medium</option>
                  <option value="low">Low</option>
                </select>
                
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => {
                    if (sortBy === 'priority') {
                      setSortDirection(sortDirection === 'desc' ? 'asc' : 'desc');
                    } else {
                      setSortBy('priority');
                      setSortDirection('desc');
                    }
                  }}
                >
                  <ArrowUpDown className="w-4 h-4 mr-1" />
                  Sort by Priority
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              {filteredControlGaps.length === 0 ? (
                <div className="text-center py-8">
                  <Shield className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
                  <h3 className="text-lg font-semibold mb-2">No Control Gaps Found</h3>
                  <p className="text-muted-foreground">
                    {(analysis.control_gaps?.length || 0) === 0 
                      ? 'All controls are properly implemented'
                      : 'No control gaps match your current filters'
                    }
                  </p>
                </div>
              ) : (
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead className="w-12">
                        <input
                          type="checkbox"
                          checked={selectedControlGaps.size === filteredControlGaps.length && filteredControlGaps.length > 0}
                          onChange={handleSelectAllControlGaps}
                        />
                      </TableHead>
                      <TableHead>Control</TableHead>
                      <TableHead>Implementation Status</TableHead>
                      <TableHead>Gap Severity</TableHead>
                      <TableHead>Affected Vulnerabilities</TableHead>
                      <TableHead>Priority</TableHead>
                      <TableHead>Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {filteredControlGaps.map((gap) => (
                      <TableRow key={gap.control_id}>
                        <TableCell>
                          <input
                            type="checkbox"
                            checked={selectedControlGaps.has(gap.control_id)}
                            onChange={() => handleSelectControlGap(gap.control_id)}
                          />
                        </TableCell>
                        <TableCell>
                          <div className="space-y-1">
                            <div className="font-medium">{gap.control_id}</div>
                            <div className="text-sm text-muted-foreground">{gap.control_title}</div>
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="flex items-center gap-2">
                            {getImplementationStatusIcon(gap.implementation_status)}
                            <span className="text-sm">{gap.implementation_status}</span>
                          </div>
                        </TableCell>
                        <TableCell>
                          <Badge variant={getSeverityBadgeVariant(gap.gap_severity)}>
                            {gap.gap_severity}
                          </Badge>
                        </TableCell>
                        <TableCell>
                          <div className="space-y-1">
                            <div className="font-medium">{gap.affected_vulnerabilities.length} vulnerabilities</div>
                            <div className="text-sm text-muted-foreground">
                              {gap.affected_systems.length} systems affected
                            </div>
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="font-medium text-center">
                            {gap.remediation_priority}
                          </div>
                        </TableCell>
                        <TableCell>
                          <Button variant="outline" size="sm">
                            <Eye className="w-4 h-4 mr-1" />
                            Details
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="mappings">
          <Card>
            <CardHeader>
              <CardTitle>Vulnerability-Control Mappings</CardTitle>
              <CardDescription>
                NIST 800-53 control mappings for identified vulnerabilities
              </CardDescription>
            </CardHeader>
            <CardContent>
              {(analysis.vulnerability_control_mappings?.length || 0) === 0 ? (
                <div className="text-center py-8">
                  <Link className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
                  <h3 className="text-lg font-semibold mb-2">No Control Mappings Available</h3>
                  <p className="text-muted-foreground">
                    Enhanced control mapping analysis is not available
                  </p>
                </div>
              ) : (
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Vulnerability ID</TableHead>
                      <TableHead>Control ID</TableHead>
                      <TableHead>Confidence</TableHead>
                      <TableHead>Rationale</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {analysis.vulnerability_control_mappings?.map((mapping, index) => (
                      <TableRow key={`${mapping.vulnerability_id}-${mapping.control_id}-${index}`}>
                        <TableCell className="font-medium">{mapping.vulnerability_id}</TableCell>
                        <TableCell>
                          <Badge variant="outline">{mapping.control_id}</Badge>
                        </TableCell>
                        <TableCell>
                          <div className="flex items-center gap-2">
                            <div className="w-16 bg-gray-200 rounded-full h-2">
                              <div 
                                className="bg-blue-600 h-2 rounded-full" 
                                style={{ width: `${mapping.mapping_confidence}%` }}
                              ></div>
                            </div>
                            <span className="text-sm">{mapping.mapping_confidence}%</span>
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="text-sm text-muted-foreground max-w-xs truncate">
                            {mapping.mapping_rationale}
                          </div>
                        </TableCell>
                      </TableRow>
                    )) || []}
                  </TableBody>
                </Table>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
