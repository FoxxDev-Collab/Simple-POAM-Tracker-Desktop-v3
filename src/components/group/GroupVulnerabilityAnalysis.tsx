import { useEffect, useState } from 'react';
import { invoke } from '@tauri-apps/api/core';
import { 
  Shield, 
  AlertTriangle, 
  Target, 
  TrendingUp,
  Eye,
  Users,
  FileText,
  Search,
  ArrowUpDown
} from 'lucide-react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';
import { Button } from '../ui/button';
import { Badge } from '../ui/badge';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../ui/table';
import { Input } from '../ui/input';
import { useToast } from '../../context/ToastContext';

interface GroupVulnerabilityAnalysisProps {
  groupId: string;
  systems: any[];
  onCreatePOAMsFromVulnerabilities?: (vulnerabilities: CrossSystemVulnerability[]) => void;
}

interface CrossSystemVulnerability {
  vulnerability_id: string;
  severity: string;
  title: string;
  description: string;
  affected_systems: string[];
  cve_ids: string[];
  suggested_poam_title: string;
  risk_score: number;
}

interface SystemVulnerabilitySummary {
  system_id: string;
  system_name: string;
  total_vulnerabilities: number;
  critical_count: number;
  high_count: number;
  medium_count: number;
  low_count: number;
  unique_vulnerabilities: string[];
}

interface GroupVulnerabilityAnalysis {
  group_id: string;
  total_systems: number;
  total_vulnerabilities: number;
  critical_vulnerabilities: number;
  high_vulnerabilities: number;
  medium_vulnerabilities: number;
  low_vulnerabilities: number;
  cross_system_vulnerabilities: CrossSystemVulnerability[];
  system_summaries: SystemVulnerabilitySummary[];
}

export default function GroupVulnerabilityAnalysis({ groupId, systems, onCreatePOAMsFromVulnerabilities }: GroupVulnerabilityAnalysisProps) {
  const [analysis, setAnalysis] = useState<GroupVulnerabilityAnalysis | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [selectedVulnerabilities, setSelectedVulnerabilities] = useState<Set<string>>(new Set());
  const [searchFilter, setSearchFilter] = useState('');
  const [severityFilter, setSeverityFilter] = useState<string>('all');
  const [sortBy, setSortBy] = useState<'severity' | 'systems' | 'title'>('severity');
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');
  const { showToast } = useToast();

  useEffect(() => {
    if (groupId) {
      analyzeVulnerabilities();
    }
  }, [groupId]);

  const analyzeVulnerabilities = async () => {
    setIsLoading(true);
    try {
      console.log('Analyzing vulnerabilities for group:', groupId);
      const result = await invoke<GroupVulnerabilityAnalysis>('analyze_group_vulnerabilities', { 
        groupId 
      });
      setAnalysis(result);
      console.log('Vulnerability analysis completed:', result);
    } catch (error) {
      console.error('Failed to analyze vulnerabilities:', error);
      showToast('error', 'Failed to analyze group vulnerabilities');
    } finally {
      setIsLoading(false);
    }
  };

  const getSeverityBadgeVariant = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical':
        return 'destructive';
      case 'high':
        return 'destructive';
      case 'medium':
        return 'default';
      case 'low':
        return 'secondary';
      default:
        return 'outline';
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical':
        return 'text-red-600';
      case 'high':
        return 'text-orange-600';
      case 'medium':
        return 'text-yellow-600';
      case 'low':
        return 'text-blue-600';
      default:
        return 'text-gray-600';
    }
  };

  const getSeverityOrder = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical': return 4;
      case 'high': return 3;
      case 'medium': return 2;
      case 'low': return 1;
      default: return 0;
    }
  };

  const filteredVulnerabilities = analysis?.cross_system_vulnerabilities.filter(vuln => {
    const matchesSearch = vuln.title.toLowerCase().includes(searchFilter.toLowerCase()) ||
                         vuln.vulnerability_id.toLowerCase().includes(searchFilter.toLowerCase()) ||
                         vuln.description.toLowerCase().includes(searchFilter.toLowerCase());
    
    const matchesSeverity = severityFilter === 'all' || vuln.severity.toLowerCase() === severityFilter.toLowerCase();
    
    return matchesSearch && matchesSeverity;
  }).sort((a, b) => {
    let comparison = 0;
    
    switch (sortBy) {
      case 'severity':
        comparison = getSeverityOrder(b.severity) - getSeverityOrder(a.severity);
        break;
      case 'systems':
        comparison = b.affected_systems.length - a.affected_systems.length;
        break;
      case 'title':
        comparison = a.title.localeCompare(b.title);
        break;
    }
    
    return sortDirection === 'desc' ? comparison : -comparison;
  }) || [];

  const handleSelectVulnerability = (vulnId: string) => {
    const newSelected = new Set(selectedVulnerabilities);
    if (newSelected.has(vulnId)) {
      newSelected.delete(vulnId);
    } else {
      newSelected.add(vulnId);
    }
    setSelectedVulnerabilities(newSelected);
  };

  const handleSelectAll = () => {
    if (selectedVulnerabilities.size === filteredVulnerabilities.length) {
      setSelectedVulnerabilities(new Set());
    } else {
      setSelectedVulnerabilities(new Set(filteredVulnerabilities.map(v => v.vulnerability_id)));
    }
  };

  const handleCreateGroupPOAMs = () => {
    if (selectedVulnerabilities.size === 0) {
      showToast('warning', 'Please select vulnerabilities to create POAMs');
      return;
    }
    
    const selectedVulns = filteredVulnerabilities.filter(v => 
      selectedVulnerabilities.has(v.vulnerability_id)
    );
    
    if (onCreatePOAMsFromVulnerabilities) {
      onCreatePOAMsFromVulnerabilities(selectedVulns);
    } else {
      // Fallback behavior
      console.log('Creating Group POAMs for vulnerabilities:', selectedVulns);
      showToast('info', `Creating Group POAM for ${selectedVulns.length} vulnerabilities`);
    }
  };

  const getSystemName = (systemId: string) => {
    const system = systems.find(s => s.id === systemId);
    return system?.name || systemId;
  };

  if (isLoading) {
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-bold">Vulnerability Analysis</h2>
            <p className="text-muted-foreground">Analyzing security vulnerabilities across all systems...</p>
          </div>
        </div>
        <div className="flex items-center justify-center p-12">
          <div className="text-muted-foreground">Loading vulnerability analysis...</div>
        </div>
      </div>
    );
  }

  if (!analysis) {
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-bold">Vulnerability Analysis</h2>
            <p className="text-muted-foreground">Identify and assess security vulnerabilities across systems</p>
          </div>
          <Button onClick={analyzeVulnerabilities}>
            <Search className="w-4 h-4 mr-2" />
            Analyze Vulnerabilities
          </Button>
        </div>
        
        <Card>
          <CardContent className="flex items-center justify-center p-12">
            <div className="text-center">
              <Shield className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
              <h3 className="text-lg font-semibold mb-2">No Analysis Available</h3>
              <p className="text-muted-foreground mb-4">Click "Analyze Vulnerabilities" to scan all systems for security issues</p>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">Vulnerability Analysis</h2>
          <p className="text-muted-foreground">
            Security assessment across {analysis.total_systems} systems
          </p>
        </div>
        <div className="flex gap-2">
          <Button variant="outline" onClick={analyzeVulnerabilities}>
            <Search className="w-4 h-4 mr-2" />
            Refresh Analysis
          </Button>
          <Button 
            onClick={handleCreateGroupPOAMs}
            disabled={selectedVulnerabilities.size === 0}
          >
            <Target className="w-4 h-4 mr-2" />
            Create POAMs ({selectedVulnerabilities.size})
          </Button>
        </div>
      </div>

      {/* Summary Stats */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Vulnerabilities</CardTitle>
            <AlertTriangle className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{analysis.total_vulnerabilities}</div>
            <p className="text-xs text-muted-foreground">Across all systems</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Critical & High</CardTitle>
            <Shield className="h-4 w-4 text-destructive" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-destructive">
              {analysis.critical_vulnerabilities + analysis.high_vulnerabilities}
            </div>
            <p className="text-xs text-muted-foreground">
              {analysis.critical_vulnerabilities} critical, {analysis.high_vulnerabilities} high
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Cross-System Issues</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{analysis.cross_system_vulnerabilities.length}</div>
            <p className="text-xs text-muted-foreground">Affecting multiple systems</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Systems Analyzed</CardTitle>
            <TrendingUp className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{analysis.total_systems}</div>
            <p className="text-xs text-muted-foreground">Active systems in group</p>
          </CardContent>
        </Card>
      </div>

      {/* Cross-System Vulnerabilities */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle>Cross-System Vulnerabilities</CardTitle>
              <CardDescription>
                Vulnerabilities that affect multiple systems in the group
              </CardDescription>
            </div>
            <div className="flex items-center gap-2">
              <Button 
                variant="outline" 
                size="sm" 
                onClick={handleSelectAll}
              >
                {selectedVulnerabilities.size === filteredVulnerabilities.length ? 'Deselect All' : 'Select All'}
              </Button>
            </div>
          </div>
          
          {/* Filters */}
          <div className="flex gap-4 items-center">
            <div className="flex-1">
              <Input
                placeholder="Search vulnerabilities..."
                value={searchFilter}
                onChange={(e) => setSearchFilter(e.target.value)}
                className="max-w-sm"
              />
            </div>
            
            <select
              value={severityFilter}
              onChange={(e) => setSeverityFilter(e.target.value)}
              className="px-3 py-2 border rounded-md bg-background"
            >
              <option value="all">All Severities</option>
              <option value="critical">Critical</option>
              <option value="high">High</option>
              <option value="medium">Medium</option>
              <option value="low">Low</option>
            </select>
            
            <Button
              variant="outline"
              size="sm"
              onClick={() => {
                if (sortBy === 'severity') {
                  setSortDirection(sortDirection === 'desc' ? 'asc' : 'desc');
                } else {
                  setSortBy('severity');
                  setSortDirection('desc');
                }
              }}
            >
              <ArrowUpDown className="w-4 h-4 mr-1" />
              Sort by Severity
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          {filteredVulnerabilities.length === 0 ? (
            <div className="text-center py-8">
              <FileText className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
              <h3 className="text-lg font-semibold mb-2">No Cross-System Vulnerabilities</h3>
              <p className="text-muted-foreground">
                {analysis.cross_system_vulnerabilities.length === 0 
                  ? 'No vulnerabilities affect multiple systems'
                  : 'No vulnerabilities match your current filters'
                }
              </p>
            </div>
          ) : (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead className="w-12">
                    <input
                      type="checkbox"
                      checked={selectedVulnerabilities.size === filteredVulnerabilities.length && filteredVulnerabilities.length > 0}
                      onChange={handleSelectAll}
                    />
                  </TableHead>
                  <TableHead>Vulnerability</TableHead>
                  <TableHead>Severity</TableHead>
                  <TableHead>Affected Systems</TableHead>
                  <TableHead>Risk Score</TableHead>
                  <TableHead>Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredVulnerabilities.map((vuln) => (
                  <TableRow key={vuln.vulnerability_id}>
                    <TableCell>
                      <input
                        type="checkbox"
                        checked={selectedVulnerabilities.has(vuln.vulnerability_id)}
                        onChange={() => handleSelectVulnerability(vuln.vulnerability_id)}
                      />
                    </TableCell>
                    <TableCell>
                      <div className="space-y-1">
                        <div className="font-medium">{vuln.vulnerability_id}</div>
                        <div className="text-sm text-muted-foreground">{vuln.title}</div>
                      </div>
                    </TableCell>
                    <TableCell>
                      <Badge variant={getSeverityBadgeVariant(vuln.severity)}>
                        {vuln.severity.toUpperCase()}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <div className="space-y-1">
                        <div className="font-medium">{vuln.affected_systems.length} systems</div>
                        <div className="text-sm text-muted-foreground">
                          {vuln.affected_systems.slice(0, 3).map(systemId => getSystemName(systemId)).join(', ')}
                          {vuln.affected_systems.length > 3 && ` +${vuln.affected_systems.length - 3} more`}
                        </div>
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className={`font-medium ${getSeverityColor(vuln.severity)}`}>
                        {vuln.risk_score.toFixed(1)}
                      </div>
                    </TableCell>
                    <TableCell>
                      <Button variant="outline" size="sm">
                        <Eye className="w-4 h-4 mr-1" />
                        Details
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          )}
        </CardContent>
      </Card>

      {/* System-by-System Breakdown */}
      <Card>
        <CardHeader>
          <CardTitle>System Vulnerability Breakdown</CardTitle>
          <CardDescription>
            Vulnerability counts for each system in the group
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>System</TableHead>
                <TableHead>Total</TableHead>
                <TableHead>Critical</TableHead>
                <TableHead>High</TableHead>
                <TableHead>Medium</TableHead>
                <TableHead>Low</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {analysis.system_summaries.map((summary) => (
                <TableRow key={summary.system_id}>
                  <TableCell className="font-medium">{summary.system_name}</TableCell>
                  <TableCell>{summary.total_vulnerabilities}</TableCell>
                  <TableCell>
                    {summary.critical_count > 0 ? (
                      <Badge variant="destructive">{summary.critical_count}</Badge>
                    ) : (
                      <span className="text-muted-foreground">0</span>
                    )}
                  </TableCell>
                  <TableCell>
                    {summary.high_count > 0 ? (
                      <Badge variant="destructive">{summary.high_count}</Badge>
                    ) : (
                      <span className="text-muted-foreground">0</span>
                    )}
                  </TableCell>
                  <TableCell>
                    {summary.medium_count > 0 ? (
                      <Badge variant="default">{summary.medium_count}</Badge>
                    ) : (
                      <span className="text-muted-foreground">0</span>
                    )}
                  </TableCell>
                  <TableCell>
                    {summary.low_count > 0 ? (
                      <Badge variant="secondary">{summary.low_count}</Badge>
                    ) : (
                      <span className="text-muted-foreground">0</span>
                    )}
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
}
