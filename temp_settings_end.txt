      {/* App Lock Setup Dialog */}
      {showAppLockSetup && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-card border border-border rounded-lg p-6 w-full max-w-md">
            <h3 className="text-lg font-semibold mb-4">Setup App Lock</h3>
            <form onSubmit={handleSetupAppLock} className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-2">Password</label>
                <div className="relative">
                  <input
                    type={showPassword ? 'text' : 'password'}
                    value={appLockPassword}
                    onChange={(e) => setAppLockPassword(e.target.value)}
                    className="w-full px-3 py-2 border border-border rounded-md pr-10"
                    placeholder="Enter password (min 6 characters)"
                    minLength={6}
                    required
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute right-3 top-1/2 -translate-y-1/2"
                  >
                    {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                  </button>
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium mb-2">Confirm Password</label>
                <div className="relative">
                  <input
                    type={showConfirmPassword ? 'text' : 'password'}
                    value={confirmAppLockPassword}
                    onChange={(e) => setConfirmAppLockPassword(e.target.value)}
                    className="w-full px-3 py-2 border border-border rounded-md pr-10"
                    placeholder="Confirm password"
                    required
                  />
                  <button
                    type="button"
                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                    className="absolute right-3 top-1/2 -translate-y-1/2"
                  >
                    {showConfirmPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                  </button>
                </div>
              </div>
              <div className="flex gap-2 justify-end">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => {
                    setShowAppLockSetup(false);
                    setAppLockPassword('');
                    setConfirmAppLockPassword('');
                  }}
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  disabled={isProcessingAppLock || !appLockPassword || !confirmAppLockPassword}
                >
                  {isProcessingAppLock ? 'Setting up...' : 'Enable Lock'}
                </Button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* App Lock Disable Dialog */}
      {showAppLockDisable && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-card border border-border rounded-lg p-6 w-full max-w-md">
            <h3 className="text-lg font-semibold mb-4">Disable App Lock</h3>
            <form onSubmit={handleDisableAppLock} className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-2">Current Password</label>
                <div className="relative">
                  <input
                    type={showCurrentPassword ? 'text' : 'password'}
                    value={currentAppLockPassword}
                    onChange={(e) => setCurrentAppLockPassword(e.target.value)}
                    className="w-full px-3 py-2 border border-border rounded-md pr-10"
                    placeholder="Enter current password"
                    required
                  />
                  <button
                    type="button"
                    onClick={() => setShowCurrentPassword(!showCurrentPassword)}
                    className="absolute right-3 top-1/2 -translate-y-1/2"
                  >
                    {showCurrentPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                  </button>
                </div>
              </div>
              <div className="flex gap-2 justify-end">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => {
                    setShowAppLockDisable(false);
                    setCurrentAppLockPassword('');
                  }}
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  variant="destructive"
                  disabled={isProcessingAppLock || !currentAppLockPassword}
                >
                  {isProcessingAppLock ? 'Disabling...' : 'Disable Lock'}
                </Button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Clear Data Confirmation Dialog */}
      {showConfirmDialog && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-card border border-border rounded-lg p-6 w-full max-w-md">
            <div className="flex items-center gap-3 mb-4">
              <div className="p-2 bg-destructive/10 rounded-lg">
                <AlertTriangle className="h-5 w-5 text-destructive" />
              </div>
              <h3 className="text-lg font-semibold">Confirm Data Deletion</h3>
            </div>
            <p className="text-muted-foreground mb-6">
              This will permanently delete all POAMs, notes, settings, and other application data. This action cannot be undone.
            </p>
            {isClearing && (
              <div className="mb-4 max-h-32 overflow-y-auto text-xs text-muted-foreground bg-muted/50 p-3 rounded border font-mono">
                {clearingLog.map((log, index) => (
                  <div key={index}>{log}</div>
                ))}
              </div>
            )}
            <div className="flex gap-2 justify-end">
              <Button
                variant="outline"
                onClick={() => {
                  setShowConfirmDialog(false);
                  setClearingLog([]);
                }}
                disabled={isClearing}
              >
                Cancel
              </Button>
              <Button
                variant="destructive"
                onClick={handleClearAllData}
                disabled={isClearing}
                className="gap-2"
              >
                <Trash2 className="h-4 w-4" />
                {isClearing ? 'Clearing...' : 'Delete All Data'}
              </Button>
            </div>
          </div>
        </div>
      )}
    </>
  );
}
